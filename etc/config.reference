# vim: set filetype=ruby:
#==============================================================================
# Copyright (C) 2020-present Alces Flight Ltd.
#
# This file is part of FlightCert.
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License 2.0 which is available at
# <https://www.eclipse.org/legal/epl-2.0>, or alternative license
# terms made available by Alces Flight Ltd - please direct inquiries
# about licensing to licensing@alces-flight.com.
#
# FlightCert is distributed in the hope that it will be useful, but
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR
# IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS
# OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A
# PARTICULAR PURPOSE. See the Eclipse Public License 2.0 for more
# details.
#
# You should have received a copy of the Eclipse Public License 2.0
# along with FlightCert. If not, see:
#
#  https://opensource.org/licenses/EPL-2.0
#
# For more information on FlightCert, please visit:
# https://github.com/openflighthpc/flight-cert
#==============================================================================

# ==============================================================================
# Application Name
# The name of the application to use in the help text
# ==============================================================================
config :app_name, default: ENV.fetch('FLIGHT_PROGRAM_NAME', 'bin/cert')

# ==============================================================================
# Certificate Type
# Specify whether a "lets_encrypt" or "self_signed" certificate should be used.
#
# It is recommended that snake_case is used for the values, but other cases are
# accepted. This includes:
# snake_case, kebab-case, CamalCase, UPPER_SNAKE (+ others)
# ==============================================================================
config :cert_type, default: 'lets_encrypt'

# ==============================================================================
# Email
# Stores the email address that all newly generated certificates will be
# associated with
#
# The email is required for lets-encrypt certificates but optional for
# self-signed
# ==============================================================================
config :email, required: false

# ==============================================================================
# Domain
# Stores the domain all newly generated certificates will be associated with.
# ==============================================================================
config :domain, required: false

# ==============================================================================
# SSL Private Key
# Define the path to the target SSL private key. Any external application
# which requires the private key, should match this path.
#
# It may either be:
#  * A relative path from the directory containing this file, or
#  * An absolute path
# ==============================================================================
config :ssl_privkey,
        default: 'ssl/privkey.pem',
        transform_with: ->(path) { File.expand_path(path, __dir__) }

# ==============================================================================
# SSL Fullchain Certificate
# Define the path to the target SSL fullchain certificate. Any external
# application which requires the certificate, should match this path.
#
# It may either be:
#  * A relative path from the directory containing this file, or
#  * An absolute path
# ==============================================================================
config :ssl_fullchain,
        default: 'ssl/fullchain.pem',
        transform_with: ->(path) { File.expand_path(path, __dir__) }

# ==============================================================================
# Self Signed Directory
# Define the directory where the self signed fullchain certificate and private
# key will be stored.
#
# It may either be:
#  * A relative path from the directory containing this file, or
#  * An absolute path
# ==============================================================================
config :selfsigned_dir,
        default: 'self-signed',
        transform_with: ->(path) { File.expand_path(path, __dir__) }

# ==============================================================================
# Lets Encrypt Live Directory
# Define where LetsEncrypt stores its live certificates.
#
# All paths are expanded from the file system root directory
# ==============================================================================
config :letsencyrpt_live_dir,
        default: '/etc/letsencrypt/live',
        transform_with: ->(path) { File.expand_path(path, '/') }

# ==============================================================================
# Certbot "Binary"
# Define the path to the certbot bin file. For internal security reasons, certbot
# must be executed via an absolute path.
#
# All paths are expanded from the file system root directory
# ==============================================================================
config :certbot_bin,
        default: '/usr/local/bin/certbot',
        transform_with: ->(path) { File.expand_path(path, '/') }

# ==============================================================================
# Certbot Plugin Flags
# Define an additional set of flags to the 'certbot certonly' command.
# The following flags will always be provided:
#   -n --agree-tos --domain DOMAIN --email EMAIL
#
# However additional plugin flags to 'certonly' are always required as the
# command is ran non-interactively. The exact flags depend on the application
# but are likely either: --nginx or --apache
# ==============================================================================
config :certbot_plugin_flags, default: '--nginx'

# ==============================================================================
# Cron Path
# The file path of the auto-renewal crontab. This file will be created when
# requested.
#
# All paths are expanded from the file system root directory
# ==============================================================================
config :cron_path,
        default: '/etc/cron.daily/flight-cert',
        transform_with: ->(path) { File.expand_path(path, '/') }

# ==============================================================================
# Cron Script
# Define the script cron that will be ran by cron to enable automatic
# certificate renewal
#
# Automatic renewal is disabled without this parameter
# ==============================================================================
config :cron_script

# ==============================================================================
# Log Path
# The file the logger will write to. It will write to standard error when set
# to nil.
#
# It may be:
#  * A relative path from the directory containing this file,
#  * An absolute path, or
#  * Nil to print to standard error
# ==============================================================================
config :log_path,
        required: false,
        default: '../var/log/flight-cert.log',
        transform_with: ->(p) { p ? File.expand_path(p, __dir__) : p }

# ==============================================================================
# Service Status Command
# Define the system command which will check if the external web service is
# running. It must exit 0 if and only if the service is running.
#
# This config must be set in order for LetsEncrypt to operate correctly
# ==============================================================================
config :status_command, default: 'echo No Status Command!; exit 1'

# ==============================================================================
# Service Restart Command
# Define the system command which will restart the external web service. It
# must exit 0 if and only if the service restarted correctly.
#
# This config must be set for most operation to function correctly
# ==============================================================================
config :restart_command, default: 'echo No Restart Command!; exit 1'

# ==============================================================================
# Start Service Command
# An optional command to include in the error message on how to start the web
# server. It is not executed by the tool
# ==============================================================================
config :start_command_prompt

# ==============================================================================
# Log level
# Set at which severity the application will log
# Valid levels: 'disabled', 'fatal', 'error', 'warn', 'info', 'debug'
# ==============================================================================
config :log_level, default: 'error'

